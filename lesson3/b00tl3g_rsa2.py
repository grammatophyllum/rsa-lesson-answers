c=48110072124579167461546053150548394438991506947110834518922795223588775780016059945335528224233915567081784568011331510667073305175129745846622693206524138653079191005332868839740709827477933814768297631113159268897244567048574710621211965173676333386140741755977693326900207363647768239109703558914700762687
n=66494945551087646699749495431362405537976459806499433251857091008972552478273429492768619293926039520679099658000604197084148977602484257155565757243261113240201287093972566246252133397811813478872743024937103095316484682954318029384174354636280714117674282339268179568310382669335348471650198451459576543319
e=12565015269308473331548556562277675666910302245200253008087007569084884719943515126393435484321529417338144409488983053491769549088746281346636653153188968424144039775018192663301578600680245234772761615861177568726038893445757208308704532314939643879338825998324612496051544153111901858690994839750091879681

# Observation 1
# N cannot be factorised
from factordb.factordb import FactorDB
f = FactorDB(n)
f.connect()
factor_list = f.get_factor_list()
print(len(factor_list)) # 1 factor only

# Observation 2
# e is extremely large
# This means d is extremely small
print(len(str(e))) # 308

# Therefore, we can try wiener attack
import owiener
from Crypto.Util.number import long_to_bytes

d = owiener.attack(e, n)
m = pow(c, d, n)
msg = str(long_to_bytes(m))[2:-1].strip()

print(msg) #picoCTF{bad_1d3a5_2438125}