from Crypto.Util.number import inverse, long_to_bytes
import gmpy2

# Common n
n = 28613370073421778967605514732870472849214603657316054493433566383953575567049700827092565638191112896372565114955037566029899716494193506767622661809959162166470274362104410044121619889335489995340438494554201044114882061630250004222565365449835830068052396270365356933873300339276625543610983257286490531284664598240634311690163372864322731519994639259777650975394179570756084811994252529139934469043253569508149257461832546650328860991132812956481499689759082721890198989123114141079195979384926401835656882388537312552038964313138454443736978796250004440250299863595915863790723901552456034764227220749349266470069

e = 131101
e2 = 65537

c = 6514803265756636951001827345788431909528948646571088533875431488098730761709483482939854120154755078022754953592613038043780307304329358741591136899751799359745034793025545366603910842462692177895119934152046504262889507881564327004832438290822991844747370623870890337941529413852532144081617329182240609078496106174049393991129243565823367646814599355362239308792466976755641352525145976707314496149402747447173824414348914688957326019276534583176243087167209831715917433554910377617136573756594930504479841660387396090684901575795470105142376833194514402933682028809396952616477637420338600189302893768587483742611
c2 = 8967368395442345929050933013195086556384326753834188682621408966598532263117122190455685457493641876888543868862546036559418527100971381249728575047416094957405016407999336639796907619066618606876335395439181241139135363051973689224321876533580352320943990302321153216328200385693123272362966160157221745879028361255769338867411539515078408787656486182778679598763667992114429897276661264431224618234029685908442790993691679707907720765607242771617065391551824536863129680393258027946925090036613792383166081101134832494314421816151990303862577019487452364012261041179912149805992298156288962662980099497378500438104

gcd, a, b = gmpy2.gcdext(e, e2)
print(f"gcd: {gcd}, a: {a}, b: {b}")

if gcd == 1:
    print('Susceptible to Common Modulus Attack')

    first_product = pow(c, a, n)
    second_product = pow(c2, b, n)
    m = (first_product * second_product) % n
    msg = str(long_to_bytes(m))[2:-1].strip()
    print(msg) # NYRCS{9_bradyn_common_mod}
else:
    print("e and e2 are not coprime; Common Modulus Attack not possible.")