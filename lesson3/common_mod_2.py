from Crypto.Util.number import inverse, long_to_bytes
import gmpy2

n = 18432490307215459859900042789557058955712855059832755765768547731989729299682681807877968726124434307083868175216905985043702231434540622580884572378621631787705214583497954440749715427699381617548719716178198584078576185691414804084515066441561994401127799628729618762886559325204717059412535112091197502684567563128127609141230739300943249866780497690077745768106534811939321965414427554923675907952074639295141861419472416699288608792298440245660874595954053423306648645020683371438734773702092402144060460734042712994700790708113493306137832862821285558225921647964419179226614806130613985135310116076735822461763
e1 = 9814231749816258719947241
e2 = 6436594078751673246878003

c1 = 1125421478473251919189103737043105377846737620097691272952830131441354162139167926125646294378179565911992540250657816756384886181525862342939845208195223734377389622657609534093921146613766005855054071815249533431443614216937907389643789185387044937317994374414266795595983031409526028592699467601911202873087056102045346215844286889316419169387192075569419088094356270455034645680362562960020108780790431997050852869889593371877277695683755922799960153462794687827827277637988448052663705897010173997934826475854940668121382790826360547334787887733569388084296673186788435524471956086657492025369698187598002329246
c2 = 5177479987957688682810110090782662686721619313207421504042117265352119893058748709876142318953027776246955391504488781754998907726199078158205217989767377383727546423230158695154914972583589101722459845951132774674836720045180120075928476047564302013471805345643899821356720898255161951213372105517144234731285723142119933850680433054050103478930218235440414634208709876788720950978247047147541610912263819417365168827246258168648235378707350879826764881051879183673444410063370976578835314242794236734036341237134688106454813070574265784887900070018768896460277787671117522847296062714084638021008690188451933290355

gcd, a, b = gmpy2.gcdext(e1, e2)
print(f"gcd: {gcd}, a: {a}, b: {b}")

if gcd == 1:
    print('Susceptible to Common Modulus Attack')

    first_product = pow(c1, a, n)
    second_product = pow(c2, b, n)
    m = (first_product * second_product) % n
    msg = str(long_to_bytes(m))[2:-1].strip()
    print(msg) #NYRCS{10_bradyn_common_mod2}