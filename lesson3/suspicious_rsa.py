from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long

p=10282813753276295069611741623327873488014212675957024758560378134704479316522299180031441902169687925821653311511917188427152674022022960409343165320639661
q=10380224497716008995525280185814086411924654851941820491584144163850059571684676084108120814278992402713684433581245232358178564035519606944073441841542023
dp=9109416345860972381899624219221901103617011849859304678826092828723856365236013336581403113966884444374599359867301561698905714715570958365244163891847783
dq=630131041082854459424016624360065298324550222961563946274920717203522326491530182469032822716384415241811533201722279545349309212790201870497243949445447
c=66647170047055647456693669094656847255509403512520139781964892603542769006981823797519927828422041089363005349782527243212111875415985561995319858807168093390771133900993017692721698264437733333223152730609354508245302150789589096462973268294901273457550070063050093358515811884038508168627331018182902557683

# dP = d mod (p-1)
# dQ = d mod (q-1)

# m1 = c^dP mod p
# m2 = c^dQ mod q

qinv = inverse(p, q) # mod inverse of q
m1 = pow(c, dp, p)
m2 = pow(c, dq, q)
h = (qinv * (m1 - m2)) % p
m = m2 + h * q

m = long_to_bytes(m)
print(m)